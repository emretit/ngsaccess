
// Edge function yapÄ±landÄ±rmasÄ±
export const config = {
    path: "/api/card-reader",
};

// Ana edge function handler
export default async (request) => {
    // TÃ¼m istek detaylarÄ±nÄ± logla
    console.log("ðŸ“Ÿ =============================================");
    console.log("ðŸ“Ÿ KART OKUYUCU Ä°STEÄžÄ° ALINDI!");
    console.log("ðŸ“Ÿ Timestamp:", new Date().toISOString());
    console.log("ðŸ“Ÿ URL:", request.url);
    console.log("ðŸ“Ÿ Method:", request.method);
    console.log("ðŸ“Ÿ Headers:", JSON.stringify(Object.fromEntries([...request.headers])));

    // CORS OPTIONS desteÄŸi
    if (request.method === "OPTIONS") {
        console.log("ðŸ“Ÿ OPTIONS request");
        return new Response(null, {
            status: 204,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type",
            },
        });
    }

    // Sadece POST isteklerini kabul et
    if (request.method !== "POST") {
        console.log("ðŸ“Ÿ POST dÄ±ÅŸÄ± istek");
        return new Response("Method Not Allowed", {
            status: 405,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Content-Type": "text/plain",
            }
        });
    }

    try {
        // Ä°stek gÃ¶vdesini iÅŸle
        console.log("ðŸ“Ÿ POST isteÄŸi alÄ±ndÄ±, body okunuyor...");
        const text = await request.text();
        console.log("ðŸ“Ÿ Raw Body:", text);

        let body;
        try {
            body = JSON.parse(text);
            console.log("ðŸ“Ÿ Parsed Body:", JSON.stringify(body));
        } catch (error) {
            console.log("ðŸ“Ÿ JSON parse hatasÄ±:", error);
            console.log("ðŸ“Ÿ Ham veriyi analiz ediyorum...");
            
            // JSON parse hatasÄ± olursa, raw body'yi analiz etmeye Ã§alÄ±ÅŸ
            body = { error: "JSON parse error" };
        }

        if (!body) {
            console.log("ðŸ“Ÿ Body NULL");
            throw new Error("Invalid body format");
        }

        // OlasÄ± tÃ¼m kart okuyucu formatlarÄ±nÄ± kontrol et
        let combinedValue = null;
        
        // 1. "user_id,serial" formatÄ±
        if (body["user_id,serial"]) {
            combinedValue = body["user_id,serial"];
            console.log("ðŸ“Ÿ Format 1 bulundu: user_id,serial =", combinedValue);
        } 
        // 2. "user_id_serial" formatÄ± 
        else if (body["user_id_serial"]) {
            combinedValue = body["user_id_serial"];
            console.log("ðŸ“Ÿ Format 2 bulundu: user_id_serial =", combinedValue);
        }
        // 3. BaÅŸka bir key'in deÄŸeri iÃ§inde kart bilgisi var mÄ± kontrol et
        else {
            console.log("ðŸ“Ÿ Standart format bulunamadÄ±. TÃ¼m body'yi analiz ediyorum...");
            // TÃ¼m body'yi dÃ¶ngÃ¼ye alÄ±p deÄŸerleri kontrol et
            for (const key in body) {
                const value = body[key];
                if (typeof value === "string" && (value.includes("%T") || value.includes(","))) {
                    combinedValue = value;
                    console.log(`ðŸ“Ÿ Alternatif format bulundu: ${key} =`, value);
                    break;
                }
            }
        }

        if (combinedValue) {
            // Hem virgÃ¼l hem de noktalÄ± virgÃ¼l iÃ§in parse et
            let parts;
            if (combinedValue.includes(",")) {
                parts = combinedValue.split(",");
                console.log("ðŸ“Ÿ VirgÃ¼lle ayrÄ±lmÄ±ÅŸ deÄŸerler:", parts);
            } else if (combinedValue.includes(";")) {
                parts = combinedValue.split(";");
                console.log("ðŸ“Ÿ NoktalÄ± virgÃ¼lle ayrÄ±lmÄ±ÅŸ deÄŸerler:", parts);
            } else {
                parts = [combinedValue]; // Tek bir deÄŸer
                console.log("ðŸ“Ÿ BÃ¶lÃ¼nemeyen tek deÄŸer:", parts);
            }

            // Kart ID'sini tespit et
            let user_id = parts[0];
            if (user_id.includes("%T")) {
                user_id = user_id.replace("%T", "test-kart-id");
            }
            
            // Seri numarasÄ±nÄ± tespit et
            const serial = parts.length > 1 ? parts[1] : "";

            console.log("ðŸ“Ÿ Kart Okundu, user_id:", user_id, "serial:", serial);

            // Kart okutulunca aÃ§ma komutu dÃ¶ndÃ¼r
            const response = { "response": "open_relay" };
            console.log("ðŸ“Ÿ YanÄ±t dÃ¶ndÃ¼rÃ¼lÃ¼yor:", JSON.stringify(response));

            return new Response(JSON.stringify(response), {
                status: 200,
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Content-Type": "application/json",
                },
            });
        } else {
            console.log("ðŸ“Ÿ Kart bilgisi bulunamadÄ±, tÃ¼m body:", JSON.stringify(body));
            return new Response(JSON.stringify({
                error: "Missing card identification field",
                received: body
            }), {
                status: 400,
                headers: {
                    "Access-Control-Allow-Origin": "*",
                    "Content-Type": "application/json",
                },
            });
        }
    } catch (error) {
        // Hata yakalama
        console.log("ðŸ“Ÿ HATA:", error.message);
        return new Response(JSON.stringify({
            error: "Server error",
            message: error.message,
            stack: error.stack
        }), {
            status: 500,
            headers: {
                "Access-Control-Allow-Origin": "*",
                "Content-Type": "application/json",
            },
        });
    } finally {
        console.log("ðŸ“Ÿ Ä°stek iÅŸleme tamamlandÄ±");
        console.log("ðŸ“Ÿ =============================================");
    }
};
